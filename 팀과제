//Coa 7조

ArrayList<PVector> mice = new ArrayList<PVector>();
ArrayList<Cat> cats = new ArrayList<Cat>();

int state = 0;
int life = 3;

// 팩맨 변수
float pacX, pacY;
float pacSpeed = 3;
float pacBaseSpeed = 3;
int pacDir = 1;
boolean mouthOpen = true;
boolean prevMouthOpen = false; // 쥐 타이밍용
int mouthSpeed = 10;
int pacSlowTimer = 0;
float pacSize = 40;
color pacColor = color(255, 255, 0); // 노란색

// 도라에몽 변수
float doraX, doraY;
boolean stunned = false;
int stunTimer = 0;

// 시간 관련
int startTime = 0;
int elapsedSec = 0;

PFont font;

void setup() {
  size(800, 600);
  font = createFont("Arial", 20);
  resetGame();
}

void draw() {
  background(0);
  if (state == 0) startScreen();
  else if (state == 1) playGame();
  else if (state == 2) gameOver();
}

void startScreen() {
  fill(255);
  textAlign(CENTER, CENTER);
  textFont(font, 28);
  text("Coa team 7 \nPress ENTER to Start", width/2, height/2);
}

void gameOver() {
  fill(255, 80, 80);
  textAlign(CENTER, CENTER);
  textFont(font, 28);
  text("GAME OVER \nPress R to Restart", width/2, height/2);
}

void resetGame() {
  pacX = width/2;
  pacY = 80;
  pacSpeed = pacBaseSpeed;
  pacSlowTimer = 0;
  pacSize = 40;
  pacColor = color(255, 255, 0);
  doraX = width/2;
  doraY = height - 80;
  mice.clear();
  cats.clear();
  life = 3;
  stunned = false;
  stunTimer = 0;
  startTime = millis();
  elapsedSec = 0;
  state = 0;
}

// ---------------- 메인 루프 ----------------
void playGame() {
  // 경과 시간 계산
  elapsedSec = (millis() - startTime) / 1000;

  // 팩맨 단계 변화 (시간 기반)
  if (elapsedSec >= 60) { // 2단계
    pacColor = color(255, 0, 0);  // 빨강
    pacSize = 60;
    mouthSpeed = 6;
  } else if (elapsedSec >= 30) { // 1단계
    pacColor = color(255, 165, 0); // 주황
    pacSize = 50;
    mouthSpeed = 9;
  } else {
    pacColor = color(255, 255, 0); // 노랑
    pacSize = 40;
    mouthSpeed = 13;
  }

  // 팩맨 좌우 이동
  pacX += pacSpeed * pacDir;
  if (pacX < 60 || pacX > width - 60) pacDir *= -1;

  // 팩맨 입 여닫기
  if (frameCount % mouthSpeed == 0) mouthOpen = !mouthOpen;

  // 쥐 타이밍: 입이 닫힘 → 열림 순간에만 한 마리 발사
  if (mouthOpen && !prevMouthOpen) {
    mice.add(new PVector(pacX, pacY + pacSize/2));
  }
  prevMouthOpen = mouthOpen;

  // 팩맨 그리기
  drawPacman(pacX, pacY, pacSize, (mouthOpen)?1:0, pacColor);

  // 쥐 이동 (단계별 속도 증가)
  float mouseSpeed = (elapsedSec >= 60) ? 8 : (elapsedSec >= 30 ? 6 : 5);
  for (int i = mice.size() - 1; i >= 0; i--) {
    PVector m = mice.get(i);
    m.y += mouseSpeed;
    drawMouse(m.x, m.y, 3);
    if (dist(m.x, m.y, doraX, doraY) < 40) {
      mice.remove(i);
      life--;
      if (life <= 0) state = 2;
    } else if (m.y > height) {
      mice.remove(i);
    }
  }

  // 고양이 생성 (3초마다)
  if (frameCount % 180 == 0) {
    float x = random(60, width - 60);
    float type = random(1);
    cats.add(new Cat(x, 100, (type < 0.5) ? 0 : 1)); // 0=검정, 1=황금
  }

  // 고양이 이동 및 효과
  for (int i = cats.size() - 1; i >= 0; i--) {
    Cat c = cats.get(i);
    c.update();
    c.display();

    if (dist(c.x, c.y, doraX, doraY) < 50) {
      if (c.type == 1) { // 황금 고양이
        pacSpeed = pacBaseSpeed * 0.5; // 팩맨 느려짐
        pacSlowTimer = 180; // 3초 지속
      } else if (c.type == 0) { // 검정 고양이
        stunned = true;
        stunTimer = 180; // 3초 스턴
      }
      cats.remove(i);
    } else if (c.y > height) {
      cats.remove(i);
    }
  }

  // 팩맨 속도 복원
  if (pacSlowTimer > 0) {
    pacSlowTimer--;
    if (pacSlowTimer == 0) pacSpeed = pacBaseSpeed;
  }

  // 도라에몽 이동
  if (!stunned) {
    if (keyPressed) {
      if (keyCode == LEFT) doraX -= 8;
      if (keyCode == RIGHT) doraX += 8;
    }
  } else {
    stunTimer--;
    if (stunTimer <= 0) stunned = false;
  }

  doraX = constrain(doraX, 50, width - 50);
  drawDoraemon(doraX, doraY, 40);

  // ---------------- UI 표시 ----------------
  fill(255);
  textAlign(LEFT, TOP);
  text("Life: " + life, 10, 10);
  text("Time: " + elapsedSec + "s", 10, 30);
  if (stunned) text(" Stunned!", 10, 50);
  if (pacSlowTimer > 0) text(" Pacman Slow!", 10, 70);
}

void keyPressed() {
  if (state == 0 && keyCode == ENTER) state = 1;
  if (state == 2 && (key == 'r' || key == 'R')) resetGame();
}

// ---------------- 캐릭터 함수 ----------------

// 팩맨
void drawPacman(float x, float y, float r, int s, color c) {
  fill(c);
  noStroke();
  if (s == 1) arc(x, y, 2*r, 2*r, PI/4 , 2*PI - PI/4);
  else arc(x, y, 2*r, 2*r, 0, 2*PI);
}

// 도라에몽
void drawDoraemon(float x, float y, float r){  
  stroke(0);
  fill(0,150,255);
  circle(x,y, 2*r);
  fill(255);
  ellipse(x,y+(r/5),(3*r/2),(8*r/5));
  fill(255);
  ellipse(x-(r/5),y-(r/2),(2*r/5),(3*r/5));
  ellipse(x+(r/5),y-(r/2),(2*r/5),(3*r/5));
  fill(0);
  ellipse(x-(6*r/50),y-(23*r/50),(1*r/5),(2*r/5));
  ellipse(x+(6*r/50),y-(23*r/50),(1*r/5),(2*r/5));
  fill(255);
  ellipse(x+(5*r/50),y-(22*r/50),(3*r/50),(8*r/50));
  ellipse(x-(5*r/50),y-(22*r/50),(3*r/50),(8*r/50));
  fill(255,0,0);
  circle(x,y-(10*r/50),(10*r/50));
  fill(255);
  arc(x,y+(7*r/50),(70*r/50),(70*r/50),0,PI);
  line(x,y-(5*r/50),x,y+(40*r/50));
  line(x-20*r/50,y-10*r/50,x-45*r/50,y-20*r/50);
  line(x-20*r/50,y,x-50*r/50,y);
  line(x-20*r/50,y+10*r/50,x-45*r/50,y+20*r/50);
  line(x+20*r/50,y-10*r/50,x+45*r/50,y-20*r/50);
  line(x+20*r/50,y,x+50*r/50,y);
  line(x+20*r/50,y+10*r/50,x+45*r/50,y+20*r/50);
}

// 쥐
void drawMouse(float x,float y, float d){
  fill(200);
  ellipse(x,y,d*6,d*4);
  ellipse(x-d*3,y-d,d*4,d*2);
  circle(x-2*d,y-3*d,d*3);
  fill(0);
  circle(x-d*5,y-d,d);
  circle(x-d*3,y-d,0.5*d);
  line(x+3*d,y,x+5*d,y);
}

// 고양이 클래스
class Cat {
  float x, y;
  int type; // 0=검정, 1=황금
  float speed = 3;

  Cat(float x, float y, int type) {
    this.x = x;
    this.y = y;
    this.type = type;
  }

  void update() {
    y += speed;
  }

  void display() {
    if (type == 0) { // 검정 고양이
      fill(0);
      stroke(255);
    } else { // 황금 고양이
      fill(255, 215, 0);
      stroke(255);
    }
    circle(x, y, 40);
    fill(255);
    circle(x-10, y-5, 8);
    circle(x+10, y-5, 8);
    fill(0);
    circle(x-10, y-5, 4);
    circle(x+10, y-5, 4);
  }
}
